Name: Arpit Jasapara, UID: 504742401

Laboratory: Buffered versus unbuffered I/O

1. I wrote this program by first checking the number of arguments, 
and the length of the input strings. Then as I was checking the first 
string for duplicate bytes, I also filled a char array with the 
corresponding element in the other string. All other elements were left 
as 0 (NULL). Then I read each character using getchar, determined if 
it was NULL in my array, and outputted the respective character using 
putchar.

2. I wrote this program by first checking the number of arguments, 
and the length of the input strings. Then as I was checking the first 
string for duplicate bytes, I also filled a char array with the 
corresponding element in the other string. All other elements were left 
as 0 (NULL). Then I created a one-element buffer, and read the next element 
into it. Then I determined if the element's corresponding element in my 
array was NULL, and wrote out the appropriate buffer(b or &c).

3. I first created a file called test filled with every character possible. 
I used this to initially test and validate that both of my functions worked. 

I then copied the contents of test over and over into a file called 
testMassive.
As shown below, the size of testMassive > 5,000,000:

-rw-r--r-- 1 arpit csugrad 6571008 May  6 17:02 testMassive

a) I then ran the strace command as specified in the spec to output 
to another file:

strace -c ./tr2b 'abc' 'xyz' < testMassive > tr2b_trace

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 27.51    0.000074           1       103           read
 20.82    0.000056           1       101           write
 16.36    0.000044           5         9           mmap
 11.15    0.000030           8         4           mprotect
  6.32    0.000017           4         4           fstat
  4.83    0.000013           7         2           open
  3.72    0.000010          10         1           munmap
  2.60    0.000007           7         1           execve
  2.23    0.000006           3         2           close
  2.23    0.000006           6         1         1 access
  1.12    0.000003           3         1           brk
  1.12    0.000003           3         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.000269                   230         1 total

The majority of time was spent reading and writing as expected. The 
program finished in a fraction of a second, which was also expected 
due to the buffered input/output.

strace -c ./tr2u 'abc' 'xyz' < testMassive > tr2u_trace

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 55.47    7.326869           1   6571008           write
 44.53    5.881959           1   6571010           read
  0.00    0.000039           6         7           mmap
  0.00    0.000027           7         4           mprotect
  0.00    0.000014           7         2           open
  0.00    0.000010          10         1           munmap
  0.00    0.000007           7         1         1 access
  0.00    0.000007           7         1           execve
  0.00    0.000006           3         2           close
  0.00    0.000006           3         2           fstat
  0.00    0.000004           4         1           arch_prctl
  0.00    0.000003           3         1           brk
------ ----------- ----------- --------- --------- ----------------
100.00   13.208951              13142040         1 total

The majority of time was spent reading and writing as expected. However, 
the program took several seconds to complete. This is expected since 
we had to essentially create a buffer ourselves for each character, 
exponentially increasing the amount of time it took for the same task.

b) I then ran the strace command as specified in the spec to output 
to terminal:

strace -c ./tr2b 'abc' 'xyz' < testMassive

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 94.61    0.006566           1      6417           write
  3.34    0.000232           2       103           read
  0.68    0.000047           5         9           mmap
  0.39    0.000027           7         4           mprotect
  0.24    0.000017           4         4           fstat
  0.19    0.000013           7         2           open
  0.14    0.000010          10         1           munmap
  0.10    0.000007           4         2           close
  0.10    0.000007           7         1         1 access
  0.10    0.000007           7         1           execve
  0.06    0.000004           4         1           brk
  0.04    0.000003           3         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.006940                  6546         1 total

The majority of time was spent writing. The reason for this is that 
the I/O buffer for the terminal is smaller than the I/O buffer for 
reading/writing to another file. Thus, there were less read calls than 
write calls, and when compared to the buffered strace above, it took 
more time to run this command.

strace -c ./tr2u 'abc' 'xyz' < testMassive

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.84    8.969362           1   6571008           write
 42.16    6.536765           1   6571010           read
  0.00    0.000040           6         7           mmap
  0.00    0.000028           7         4           mprotect
  0.00    0.000014           7         2           open
  0.00    0.000011          11         1           munmap
  0.00    0.000009           5         2           close
  0.00    0.000007           4         2           fstat
  0.00    0.000007           7         1         1 access
  0.00    0.000007           7         1           execve
  0.00    0.000005           5         1           brk
  0.00    0.000004           4         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   15.506259              13142040         1 total

The majority of time was spent reading and writing. The results of 
this strace are nearly identical to the results of the above unbuffered 
strace. This is due to the fact that we are using the same "buffer" 
of 1 byte for both I/O to terminal and to another file, so performance 
does not change.

4. I then ran the time command as specified in the spec: 

time ./tr2b 'abc' 'xyz' < testMassive > tr2b_time

real    0m0.195s
user    0m0.130s
sys     0m0.004s

Similar to the results from strace, the buffered tr command finished 
in a fraction of a second, using only a few thousandths of a second 
of system time.


time ./tr2u 'abc' 'xyz' < testMassive > tr2u_time

real    0m7.663s
user    0m0.347s
sys     0m7.260s

Similar to the results from strace, the unbuffered tr command 
finished in several seconds. It took up several seconds of the 
system time itself, running thousands of times slower than the 
buffered tr. 